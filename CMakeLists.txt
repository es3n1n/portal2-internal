# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include("cmake/cmkr.cmake" OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-m32 ")

set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} "-m32 ")

# Options
option(P2_BUILD_INJECTOR "" OFF)

project(portal2-internal
	LANGUAGES
		C
		CXX
	DESCRIPTION
		"Portal 2\\MEL\\Reloaded internal modification"
)

# Subdirectory: vendor
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/vendor")
else()
	set(CMAKE_FOLDER vendor)
endif()
add_subdirectory(vendor)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Target: portal2-internal
set(portal2-internal_SOURCES
	"portal2-internal/dllmain.cpp"
	"portal2-internal/hack/bootstrap.cpp"
	"portal2-internal/hack/cfg/cfg.cpp"
	"portal2-internal/hack/features/misc/airacceleration.cpp"
	"portal2-internal/hack/features/misc/airacceleration_fix.cpp"
	"portal2-internal/hack/features/misc/autostrafer.cpp"
	"portal2-internal/hack/features/misc/bhop.cpp"
	"portal2-internal/hack/features/visuals/chams.cpp"
	"portal2-internal/hack/features/visuals/change_portal_colors.cpp"
	"portal2-internal/hack/features/visuals/mat_ambient_light.cpp"
	"portal2-internal/hack/features/visuals/trails.cpp"
	"portal2-internal/hack/hooks/hooked/create_move.cpp"
	"portal2-internal/hack/hooks/hooked/draw_model_execute.cpp"
	"portal2-internal/hack/hooks/hooked/override_view.cpp"
	"portal2-internal/hack/hooks/hooked/present.cpp"
	"portal2-internal/hack/hooks/hooked/reset.cpp"
	"portal2-internal/hack/hooks/hooks.cpp"
	"portal2-internal/hack/menu/menu.cpp"
	"portal2-internal/hack/menu/ui/imgui_custom.cpp"
	"portal2-internal/sdk/portal.cpp"
	"portal2-internal/util/game/game.cpp"
	"portal2-internal/util/hooking/detours/detours.cpp"
	"portal2-internal/util/hooking/vmt/vmt.cpp"
	"portal2-internal/util/input/input.cpp"
	"portal2-internal/util/logger/logger.cpp"
	"portal2-internal/util/math/math.cpp"
	"portal2-internal/util/mem/mem.cpp"
	"portal2-internal/hack/cfg/cfg.hpp"
	"portal2-internal/hack/cfg/detail/json.hpp"
	"portal2-internal/hack/cfg/opts.hpp"
	"portal2-internal/hack/features/features.hpp"
	"portal2-internal/hack/features/misc/misc.hpp"
	"portal2-internal/hack/features/visuals/visuals.hpp"
	"portal2-internal/hack/hack.hpp"
	"portal2-internal/hack/hooks/hooks.hpp"
	"portal2-internal/hack/menu/menu.hpp"
	"portal2-internal/hack/menu/ui/imgui_custom.hpp"
	"portal2-internal/sdk/enums/e_cmd_buttons.hpp"
	"portal2-internal/sdk/enums/e_ent_flags.hpp"
	"portal2-internal/sdk/enums/enums.hpp"
	"portal2-internal/sdk/interfaces/c_clientmode.hpp"
	"portal2-internal/sdk/interfaces/c_cvar.hpp"
	"portal2-internal/sdk/interfaces/c_engine_client.hpp"
	"portal2-internal/sdk/interfaces/c_entitylist.hpp"
	"portal2-internal/sdk/interfaces/c_global_vars.hpp"
	"portal2-internal/sdk/interfaces/c_hl_client.hpp"
	"portal2-internal/sdk/interfaces/c_input.hpp"
	"portal2-internal/sdk/interfaces/c_input_stacksystem.hpp"
	"portal2-internal/sdk/interfaces/c_input_system.hpp"
	"portal2-internal/sdk/interfaces/c_mat_system.hpp"
	"portal2-internal/sdk/interfaces/c_model_render.hpp"
	"portal2-internal/sdk/interfaces/c_prop_portal.hpp"
	"portal2-internal/sdk/interfaces/c_studio_renderer.hpp"
	"portal2-internal/sdk/interfaces/i_model_info_client.hpp"
	"portal2-internal/sdk/interfaces/i_render_beams.hpp"
	"portal2-internal/sdk/interfaces/i_surface.hpp"
	"portal2-internal/sdk/interfaces/interfaces.hpp"
	"portal2-internal/sdk/misc/ang_t.hpp"
	"portal2-internal/sdk/misc/client_class.hpp"
	"portal2-internal/sdk/misc/color_t.hpp"
	"portal2-internal/sdk/misc/flt_range_t.hpp"
	"portal2-internal/sdk/misc/recv.hpp"
	"portal2-internal/sdk/misc/vec_t.hpp"
	"portal2-internal/sdk/portal.hpp"
	"portal2-internal/sdk/structs/c_base_entity.hpp"
	"portal2-internal/sdk/structs/c_base_player.hpp"
	"portal2-internal/sdk/structs/c_usercmd.hpp"
	"portal2-internal/util/cast/cast.hpp"
	"portal2-internal/util/game/game.hpp"
	"portal2-internal/util/hash/fnv.hpp"
	"portal2-internal/util/hooking/detours/detours.hpp"
	"portal2-internal/util/hooking/hooking.hpp"
	"portal2-internal/util/hooking/vmt/vmt.hpp"
	"portal2-internal/util/input/input.hpp"
	"portal2-internal/util/logger/logger.hpp"
	"portal2-internal/util/math/base.hpp"
	"portal2-internal/util/math/math.hpp"
	"portal2-internal/util/mem/addr/addr.hpp"
	"portal2-internal/util/mem/mem.hpp"
	"portal2-internal/util/mem/module/module.hpp"
	"portal2-internal/util/platform.hpp"
	"portal2-internal/util/util.hpp"
	cmake.toml
)

add_library(portal2-internal SHARED)

target_sources(portal2-internal PRIVATE ${portal2-internal_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${portal2-internal_SOURCES})

target_compile_definitions(portal2-internal PUBLIC
	NOMINMAX
	IMGUI_DEFINE_MATH_OPERATORS
)

target_compile_features(portal2-internal PUBLIC
	cxx_std_20
)

if(MSVC) # msvc
	target_compile_options(portal2-internal PUBLIC
		"/MP"
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_options(portal2-internal PUBLIC
		-Wno-deprecated-enum-enum-conversion
		-Wno-stringop-overflow
	)
endif()

target_include_directories(portal2-internal PUBLIC
	"portal2-internal/"
)

target_link_libraries(portal2-internal PUBLIC
	fmt
	imgui
)

# Target: portal2-injector
if(P2_BUILD_INJECTOR) # build-injector
	set(portal2-injector_SOURCES
		"portal2-injector/injector/injector.cpp"
		"portal2-injector/main.cpp"
		cmake.toml
	)

	add_executable(portal2-injector)

	target_sources(portal2-injector PRIVATE ${portal2-injector_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${portal2-injector_SOURCES})

	target_compile_definitions(portal2-injector PRIVATE
		NOMINMAX
	)

	target_compile_features(portal2-injector PRIVATE
		cxx_std_20
	)

	if(MSVC) # msvc
		target_compile_options(portal2-injector PRIVATE
			"/MP"
		)
	endif()

	target_include_directories(portal2-injector PRIVATE
		"portal2-injector/"
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT portal2-injector)
	endif()

endif()
